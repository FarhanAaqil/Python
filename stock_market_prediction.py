# -*- coding: utf-8 -*-
"""Stock Market Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kO-GWqtTGCLANK9PRE6paV8l17dC9Hyj
"""

pip install dash yfinance pandas numpy scikit-learn keras

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from keras.models import Sequential
from keras.layers import GRU, Dense

# Fetch stock data
def fetch_stock_data(ticker, start_date, end_date):
    """
    Fetch historical stock data for a given ticker symbol.
    """
    try:
        stock_data = yf.download(ticker, start=start_date, end=end_date)
        if stock_data.empty:
            raise ValueError("No data found for the given ticker.")
        return stock_data
    except Exception as e:
        raise ValueError(f"Error fetching data: {e}")

# Preprocess data
def preprocess_data(data):
    """
    Preprocess the stock data for training and testing.
    """
    # Use 'Close' price for prediction
    close_prices = data['Close'].values.reshape(-1, 1)

    # Scale the data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(close_prices)

    # Split into training and testing sets (80% train, 20% test)
    train_size = int(len(scaled_data) * 0.8)
    train_data, test_data = scaled_data[:train_size], scaled_data[train_size:]

    return train_data, test_data, scaler

# Prepare training and testing data
def prepare_training_data(data):
    """
    Prepare input sequences for GRU model.
    """
    x, y = [], []
    for i in range(60, len(data)):  # Use the last 60 days to predict the next day
        x.append(data[i-60:i, 0])
        y.append(data[i, 0])
    x, y = np.array(x), np.array(y)
    x = np.reshape(x, (x.shape[0], x.shape[1], 1))  # Reshape for GRU
    return x, y

# Create GRU model
def create_gru_model(input_shape):
    """
    Create and compile a GRU model.
    """
    model = Sequential()
    model.add(GRU(units=50, return_sequences=True, input_shape=input_shape))
    model.add(GRU(units=50, return_sequences=False))
    model.add(Dense(units=25))
    model.add(Dense(units=1))  # Output layer

    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Train GRU model
def train_model(model, x_train, y_train, epochs=20, batch_size=32):
    """
    Train the GRU model.
    """
    model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=0)

# Evaluate model accuracy
def evaluate_model(model, x_test, y_test, scaler):
    """
    Evaluate the model on the test set.
    """
    # Predict on test data
    predictions = model.predict(x_test)

    # Inverse transform the predictions and actual values
    predictions = scaler.inverse_transform(predictions)
    y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

    # Calculate evaluation metrics
    mae = mean_absolute_error(y_test_actual, predictions)
    mse = mean_squared_error(y_test_actual, predictions)
    rmse = np.sqrt(mse)

    return mae, mse, rmse

# Predict future prices
def predict_future_prices(model, scaler, last_60_days, num_days):
    """
    Predict future stock prices.
    """
    predictions = []
    current_data = last_60_days  # Last 60 days of data

    for _ in range(num_days):
        # Reshape and scale the data
        x_input = np.array(current_data).reshape(1, -1, 1)

        # Predict the next day's price
        predicted_price = model.predict(x_input)

        # Append the predicted price to the list
        predictions.append(predicted_price[0][0])

        # Update the current data with the new prediction
        current_data = np.append(current_data[1:], predicted_price)

    # Inverse transform the predictions to get actual prices
    predictions = scaler.inverse_transform(np.array(predictions).reshape(-1, 1))
    return predictions.flatten()

# Initialize Dash app
app = dash.Dash(__name__, title="Stock Market Prediction with GRU")
server = app.server  # Required for deployment

# Layout
app.layout = html.Div(
    style={"font-family": "Arial, sans-serif", "padding": "20px", "background-color": "#f9f9f9"},
    children=[
        html.H1("Stock Market Prediction with GRU", style={"text-align": "center", "color": "#1f77b4"}),

        # Input fields
        html.Div([
            html.Label("Stock Ticker (e.g., AAPL):"),
            dcc.Input(id="ticker", type="text", value="AAPL", style={"width": "100%", "padding": "10px"}),
        ], style={"margin-bottom": "15px"}),

        html.Div([
            html.Label("Start Date:"),
            dcc.DatePickerSingle(id="start-date", date="2010-01-01", style={"width": "100%"}),
        ], style={"margin-bottom": "15px"}),

        html.Div([
            html.Label("End Date:"),
            dcc.DatePickerSingle(id="end-date", date="2023-01-01", style={"width": "100%"}),
        ], style={"margin-bottom": "15px"}),

        html.Div([
            html.Label("Number of Days to Predict:"),
            dcc.Input(id="future-days", type="number", value=7, style={"width": "100%", "padding": "10px"}),
        ], style={"margin-bottom": "15px"}),

        # Predict button
        html.Button("Predict", id="predict-button", style={
            "width": "100%",
            "padding": "10px",
            "background-color": "#1f77b4",
            "color": "white",
            "border": "none",
            "cursor": "pointer"
        }),

        # Output area
        html.Div(id="output", style={
            "margin-top": "20px",
            "padding": "15px",
            "background-color": "white",
            "border-radius": "5px",
            "white-space": "pre-wrap"
        }),
    ]
)

# Callback for prediction
@app.callback(
    Output("output", "children"),
    Input("predict-button", "n_clicks"),
    [
        Input("ticker", "value"),
        Input("start-date", "date"),
        Input("end-date", "date"),
        Input("future-days", "value"),
    ],
)
def update_output(n_clicks, ticker, start_date, end_date, future_days):
    if n_clicks is None:
        return ""

    try:
        # Fetch data
        stock_data = fetch_stock_data(ticker, start_date, end_date)

        # Preprocess data
        train_data, test_data, scaler = preprocess_data(stock_data)
        x_train, y_train = prepare_training_data(train_data)
        x_test, y_test = prepare_training_data(test_data)

        # Train model
        model = create_gru_model((x_train.shape[1], 1))
        train_model(model, x_train, y_train)

        # Evaluate model accuracy
        mae, mse, rmse = evaluate_model(model, x_test, y_test, scaler)

        # Predict future prices
        last_60_days = test_data[-60:]
        predictions = predict_future_prices(model, scaler, last_60_days, future_days)

        # Format results
        accuracy_metrics = (
            f"Model Accuracy:\n"
            f"Mean Absolute Error (MAE): {mae:.2f}\n"
            f"Mean Squared Error (MSE): {mse:.2f}\n"
            f"Root Mean Squared Error (RMSE): {rmse:.2f}"
        )

        predicted_prices = "\n".join([f"Day {i+1}: ${price:.2f}" for i, price in enumerate(predictions)])

        return f"{accuracy_metrics}\n\nPredicted Prices:\n{predicted_prices}"
    except Exception as e:
        return f"An error occurred: {e}"

# Run the app
if __name__ == "__main__":
    app.run(debug=True)